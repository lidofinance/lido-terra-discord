// Code generated by MockGen. DO NOT EDIT.
// Source: ./session.go

// Package discord is a generated GoMock package.
package discord

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ChannelMessageSendComplex mocks base method.
func (m *MockSession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockSessionMockRecorder) ChannelMessageSendComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendComplex), channelID, data)
}

// GuildMembers mocks base method.
func (m *MockSession) GuildMembers(guildID, after string, limit int) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMembers", guildID, after, limit)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMembers indicates an expected call of GuildMembers.
func (mr *MockSessionMockRecorder) GuildMembers(guildID, after, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMembers", reflect.TypeOf((*MockSession)(nil).GuildMembers), guildID, after, limit)
}
